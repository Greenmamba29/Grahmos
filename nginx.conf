# NGINX Configuration for Grahmos Edge Security & Speed Pack V1+V2
# Features: mTLS, DPoP forwarding, Unix Domain Socket proxying, Security headers

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format with security information
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'client_verify="$ssl_client_verify" '
                   'client_fingerprint="$ssl_client_fingerprint" '
                   'dpop_present="$http_dpop" '
                   'request_time=$request_time';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
    
    # SSL/TLS Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Upstream to Edge API via Unix Domain Socket
    upstream edge_api {
        server unix:/var/run/edge/edge.sock;
        keepalive 32;
    }
    
    # HTTPS Server with mTLS
    server {
        listen 8443 ssl http2;
        server_name _;
        
        # TLS certificates
        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
        
        # Client certificate verification (mTLS)
        ssl_client_certificate /etc/nginx/certs/ca.crt;
        ssl_verify_client optional;  # Allow both mTLS and DPoP clients
        ssl_verify_depth 2;
        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self'; font-src 'self'; object-src 'none'; media-src 'self'; form-action 'self'; base-uri 'self';" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), fullscreen=(self), payment=()" always;
        
        # Rate limiting
        limit_req zone=api_limit burst=40 nodelay;
        limit_conn conn_limit 50;
        
        # Health check endpoint (no auth required)
        location = /health {
            proxy_pass http://edge_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # No mTLS headers for health check
            proxy_cache off;
            access_log off;
        }
        
        # Authentication endpoints with special rate limiting
        location ~ ^/auth/(mtls|dpop)$ {
            limit_req zone=auth_limit burst=10 nodelay;
            
            proxy_pass http://edge_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # mTLS information
            proxy_set_header X-Client-Verify $ssl_client_verify;
            proxy_set_header X-Client-Fingerprint $ssl_client_fingerprint;
            proxy_set_header X-Client-DN $ssl_client_s_dn;
            proxy_set_header X-Client-Serial $ssl_client_serial;
            
            # DPoP header forwarding
            proxy_set_header DPoP $http_dpop;
            
            # Security headers for auth endpoints
            add_header Cache-Control "no-store, no-cache, must-revalidate, private" always;
            add_header Pragma "no-cache" always;
        }
        
        # All other API endpoints
        location / {
            # Require either valid mTLS certificate OR DPoP header
            set $auth_ok 0;
            
            # Check mTLS
            if ($ssl_client_verify = "SUCCESS") {
                set $auth_ok 1;
            }
            
            # Check DPoP header presence (will be validated by Edge API)
            if ($http_dpop != "") {
                set $auth_ok 1;
            }
            
            # Block requests without any authentication method
            if ($auth_ok = 0) {
                return 401 '{"error":"Authentication required","code":"AUTH_REQUIRED","methods":["mTLS","DPoP"]}';
            }
            
            proxy_pass http://edge_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # mTLS client certificate information
            proxy_set_header X-Client-Verify $ssl_client_verify;
            proxy_set_header X-Client-Fingerprint $ssl_client_fingerprint;
            proxy_set_header X-Client-DN $ssl_client_s_dn;
            proxy_set_header X-Client-Serial $ssl_client_serial;
            proxy_set_header X-Client-Cert $ssl_client_escaped_cert;
            
            # Forward original Authorization header
            proxy_set_header Authorization $http_authorization;
            
            # DPoP header forwarding for Proof-of-Possession
            proxy_set_header DPoP $http_dpop;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Security headers for API responses
            add_header Cache-Control "no-store, no-cache, must-revalidate, private" always;
            add_header Pragma "no-cache" always;
        }
        
        # Error pages
        error_page 401 /401.json;
        location = /401.json {
            internal;
            return 401 '{"error":"Unauthorized","code":"UNAUTHORIZED","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json always;
        }
        
        error_page 403 /403.json;
        location = /403.json {
            internal;
            return 403 '{"error":"Forbidden","code":"FORBIDDEN","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json always;
        }
        
        error_page 429 /429.json;
        location = /429.json {
            internal;
            return 429 '{"error":"Too Many Requests","code":"RATE_LIMITED","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json always;
        }
        
        error_page 500 502 503 504 /5xx.json;
        location = /5xx.json {
            internal;
            return 500 '{"error":"Internal Server Error","code":"SERVER_ERROR","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json always;
        }
    }
    
    # HTTP Server (redirect to HTTPS)
    server {
        listen 8080;
        server_name _;
        
        # Health check endpoint (for load balancer probes)
        location = /health {
            proxy_pass http://edge_api;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto http;
            
            access_log off;
        }
        
        # Let's Encrypt ACME challenge (for production certificate automation)
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri =404;
        }
        
        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$server_name:8443$request_uri;
        }
    }
}

# Stream module for additional TCP/UDP proxying if needed
stream {
    # Log format for stream connections
    log_format stream '$remote_addr - [$time_local] $protocol $bytes_sent $bytes_received $session_time';
    
    # This can be extended for additional TCP services if needed
}
