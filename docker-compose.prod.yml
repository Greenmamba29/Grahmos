version: '3.8'

# Grahmos V1+V2 Unified - Production Configuration
# Phase 3: Improve/Deploy - Production Infrastructure

services:
  # NGINX Reverse Proxy with SSL Termination
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: grahmos-nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./infra/certs:/etc/nginx/certs:ro
      - ./infra/nginx/dhparam.pem:/etc/nginx/dhparam.pem:ro
      - /var/log/nginx:/var/log/nginx
    networks:
      - grahmos-frontend
      - grahmos-backend
    depends_on:
      - edge-api
    environment:
      - TZ=UTC
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /var/cache/nginx:size=100M,noexec,nosuid,nodev
      - /var/run:size=10M,noexec,nosuid,nodev
      - /tmp:size=10M,noexec,nosuid,nodev

  # Edge API - V1+V2 Unified
  edge-api:
    build:
      context: ./packages/edge-api
      dockerfile: Dockerfile
      target: production
    container_name: grahmos-edge-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - TLS_PORT=3443
      - LOG_LEVEL=info
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
      # Database Configuration
      - DB_TYPE=${DB_TYPE:-sqlite}
      - SQLITE_PATH=/data/grahmos.db
      - MEILISEARCH_URL=http://meilisearch:7700
      - MEILISEARCH_API_KEY=${MEILISEARCH_MASTER_KEY}
      # Authentication
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE_TIME=${JWT_EXPIRE_TIME:-3600}
      - DPOP_NONCE_TTL=${DPOP_NONCE_TTL:-300}
      # Security
      - CORS_ORIGIN=${CORS_ORIGIN:-https://grahmos.com}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      # Assistant Configuration
      - ASSISTANT_DEFAULT_MODEL=${ASSISTANT_DEFAULT_MODEL:-gemma-3n}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMMA_MODEL_PATH=${GEMMA_MODEL_PATH:-/models/gemma-3n}
      # TTS Configuration
      - TTS_DEFAULT_PROVIDER=${TTS_DEFAULT_PROVIDER:-piper}
      - TTS_PIPER_MODEL_PATH=${TTS_PIPER_MODEL_PATH:-/models/piper}
      - COQUI_API_KEY=${COQUI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      # Monitoring
      - PROMETHEUS_METRICS_PORT=9090
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT}
    volumes:
      - grahmos-data:/data
      - grahmos-models:/models:ro
      - ./infra/certs:/certs:ro
      - /var/log/grahmos:/var/log/grahmos
    networks:
      - grahmos-backend
      - grahmos-data
    depends_on:
      - meilisearch
      - redis-cache
    healthcheck:
      test: ["CMD", "node", "/app/scripts/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    user: "1001:1001"
    read_only: true
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Meilisearch - Production Search Backend
  meilisearch:
    image: getmeili/meilisearch:v1.5
    container_name: grahmos-meilisearch
    restart: unless-stopped
    environment:
      - MEILI_MASTER_KEY=${MEILISEARCH_MASTER_KEY}
      - MEILI_ENV=production
      - MEILI_NO_ANALYTICS=true
      - MEILI_HTTP_ADDR=0.0.0.0:7700
      - MEILI_LOG_LEVEL=WARN
      - MEILI_MAX_INDEX_SIZE=1GB
      - MEILI_MAX_TASK_DB_SIZE=100MB
    volumes:
      - meilisearch-data:/meili_data
      - /var/log/meilisearch:/var/log/meilisearch
    networks:
      - grahmos-backend
      - grahmos-data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis Cache - Session & Rate Limiting
  redis-cache:
    image: redis:7.2-alpine
    container_name: grahmos-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
      - /var/log/redis:/var/log/redis
    networks:
      - grahmos-backend
      - grahmos-data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "999:999"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: grahmos-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - grahmos-backend
      - grahmos-monitoring
    ports:
      - "127.0.0.1:9090:9090"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "65534:65534"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Grafana - Monitoring Dashboard
  grafana:
    image: grafana/grafana:10.2.2
    container_name: grahmos-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-localhost}
      - GF_SERVER_ROOT_URL=https://${GRAFANA_DOMAIN:-localhost}/grafana/
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_LOG_LEVEL=warn
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infra/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./infra/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - grahmos-backend
      - grahmos-monitoring
    ports:
      - "127.0.0.1:3030:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "472:472"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Log Aggregation with Fluent Bit
  fluent-bit:
    image: fluent/fluent-bit:2.2.0
    container_name: grahmos-fluent-bit
    restart: unless-stopped
    volumes:
      - ./infra/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - grahmos-backend
      - grahmos-monitoring
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - DAC_READ_SEARCH
    user: "root"
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 64M

  # Backup Service
  backup-service:
    build:
      context: ./infra/backup
      dockerfile: Dockerfile
    container_name: grahmos-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
    volumes:
      - grahmos-data:/data:ro
      - meilisearch-data:/meilisearch:ro
      - redis-data:/redis:ro
      - grafana-data:/grafana:ro
      - prometheus-data:/prometheus:ro
      - /var/log/backup:/var/log/backup
    networks:
      - grahmos-data
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1002:1002"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

# Networks
networks:
  grahmos-frontend:
    driver: bridge
    name: grahmos-frontend
    ipam:
      config:
        - subnet: 172.20.0.0/24
  
  grahmos-backend:
    driver: bridge
    name: grahmos-backend
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/24
  
  grahmos-data:
    driver: bridge
    name: grahmos-data
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/24
  
  grahmos-monitoring:
    driver: bridge
    name: grahmos-monitoring
    internal: true
    ipam:
      config:
        - subnet: 172.23.0.0/24

# Volumes
volumes:
  grahmos-data:
    driver: local
    name: grahmos-data
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/grahmos

  meilisearch-data:
    driver: local
    name: meilisearch-data
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/meilisearch

  redis-data:
    driver: local
    name: redis-data
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis

  grafana-data:
    driver: local
    name: grafana-data
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/grafana

  prometheus-data:
    driver: local
    name: prometheus-data
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/prometheus

  grahmos-models:
    driver: local
    name: grahmos-models
    driver_opts:
      type: none
      o: bind
      device: ${MODELS_DIR:-./models}

# Production deployment configuration
# Use: docker-compose -f docker-compose.prod.yml up -d
