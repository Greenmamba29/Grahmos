name: Enhanced CI/CD Pipeline - Grahmos V1+V2 with NTN/RAN + Edge

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - edge-nodes

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: grahmos
  VERSION: 2.0.0
  PNPM_CACHE_FOLDER: .pnpm

jobs:
  # Build matrix for all components
  build-matrix:
    name: Build ${{ matrix.component }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        component: [edge, pwa, ios, android, assistant]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.4
          run_install: false
        if: matrix.component == 'pwa' || matrix.component == 'assistant'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
        if: matrix.component == 'pwa' || matrix.component == 'assistant'
      
      - name: Set up Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: '5.9'
        if: matrix.component == 'ios'
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
        if: matrix.component == 'android'
      
      - name: Build Edge API
        if: matrix.component == 'edge'
        run: |
          docker build \
            --build-arg VERSION=${{ env.VERSION }} \
            --build-arg BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            --build-arg GIT_COMMIT=${{ github.sha }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/edge-api:${{ github.sha }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/edge-api:latest \
            --file apps/edge-api/Dockerfile \
            ./apps/edge-api
          
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/edge-api:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/edge-api:latest
      
      - name: Build PWA
        if: matrix.component == 'pwa'
        run: |
          pnpm install --frozen-lockfile
          cd apps/pwa-shell
          pnpm run build
          pnpm run test || echo "PWA tests not implemented yet"
          
          # Build PWA container (if Dockerfile exists)
          if [ -f Dockerfile ]; then
            docker build \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/pwa:${{ github.sha }} \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/pwa:latest \
              .
            
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/pwa:${{ github.sha }}
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/pwa:latest
          else
            echo "PWA Dockerfile not found, skipping container build"
          fi
      
      - name: Build iOS App
        if: matrix.component == 'ios'
        run: |
          cd ios
          swift build -c release
          swift test
      
      - name: Build Android App
        if: matrix.component == 'android'
        run: |
          cd android
          ./gradlew build
          ./gradlew test
      
      - name: Build Assistant
        if: matrix.component == 'assistant'
        run: |
          pnpm install --frozen-lockfile
          cd packages/assistant
          pnpm run build
          pnpm test || echo "Assistant tests not implemented yet"
          
          # Build Assistant container (if Dockerfile exists)
          if [ -f Dockerfile ]; then
            docker build \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/assistant:${{ github.sha }} \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/assistant:latest \
              .
            
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/assistant:${{ github.sha }}
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/assistant:latest
          else
            echo "Assistant Dockerfile not found, skipping container build"
          fi

  # Comprehensive testing suite
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: build-matrix
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      
      - name: Make scripts executable
        run: chmod +x scripts/*.sh
      
      - name: Run comprehensive test suite
        run: |
          ./scripts/test-all.sh --ci-mode
          ./scripts/test-security.sh --ci-mode
          ./scripts/test-performance.sh --ci-mode
      
      - name: Create logs directory
        run: mkdir -p logs reports
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            logs/test-*.log
            reports/test-*.html
          if-no-files-found: ignore

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-matrix
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/edge-api:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run security audit
        run: |
          chmod +x scripts/security-audit.sh
          ./scripts/security-audit.sh --ci-mode
      
      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'https://localhost:8443'
          fail_action: false
      
      - name: Create security logs directory
        run: mkdir -p logs
        
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            trivy-results.sarif
            logs/security-*.log
            report_html.html
          if-no-files-found: ignore

  # Code quality checks
  quality-check:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.4
          run_install: false
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run linting
        run: pnpm run lint || echo "Linting not configured yet"
      
      - name: Run type checking
        run: pnpm run typecheck || echo "Type checking not configured yet"
      
      - name: Run SonarQube scan
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-suite, security-scan, quality-check]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.deploy_environment == 'staging'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Make scripts executable
        run: chmod +x scripts/*.sh
      
      - name: Deploy to staging
        run: |
          ./scripts/deploy.sh staging \
            --image-tag=${{ github.sha }} \
            --backup \
            --health-check
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}
      
      - name: Run post-deployment tests
        run: |
          ./scripts/test-functional.sh --environment=staging
          ./scripts/health-check.sh --environment=staging
      
      - name: Notify deployment
        if: secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Staging deployment completed for Grahmos V1+V2'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Skip deployment notification
        if: secrets.SLACK_WEBHOOK_URL == ''
        run: echo "⚠️  Slack webhook not configured, skipping deployment notification"

  # Deploy to edge nodes
  deploy-edge-nodes:
    name: Deploy to Edge Nodes
    runs-on: ubuntu-latest
    needs: [test-suite, security-scan, quality-check]
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_environment == 'edge-nodes'
    environment: edge-nodes
    
    strategy:
      matrix:
        edge_location: [edge-1, edge-2, edge-3]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Make scripts executable
        run: chmod +x scripts/*.sh
      
      - name: Deploy to Edge Node ${{ matrix.edge_location }}
        run: |
          ./scripts/deploy.sh edge-node \
            --location=${{ matrix.edge_location }} \
            --image-tag=${{ github.sha }} \
            --rolling-update \
            --backup
        env:
          EDGE_NODES_CONFIG: ${{ secrets.EDGE_NODES_CONFIG }}
          EDGE_SSH_KEY: ${{ secrets.EDGE_SSH_KEY }}
      
      - name: Verify edge deployment
        run: |
          ./scripts/health-check.sh --edge-node=${{ matrix.edge_location }}
      
      - name: Sync edge indexes
        run: |
          ./scripts/service-discovery.sh sync-indexes --target=${{ matrix.edge_location }}

  # Production deployment (manual approval required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-edge-nodes]
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_environment == 'production'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Make scripts executable
        run: chmod +x scripts/*.sh
      
      - name: Create production backup
        run: |
          ./scripts/backup.sh full --encrypt --production
      
      - name: Deploy to production
        run: |
          ./scripts/deploy.sh production \
            --image-tag=${{ github.sha }} \
            --rolling-update \
            --zero-downtime \
            --backup
        env:
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
      
      - name: Run production smoke tests
        run: |
          ./scripts/test-functional.sh --environment=production --smoke-test
          ./scripts/test-security.sh --environment=production --compliance-check
      
      - name: Verify deployment
        run: |
          ./scripts/health-check.sh --environment=production
          ./scripts/service-discovery.sh monitor --duration=5m
      
      - name: Notify production deployment
        if: secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#production'
          text: 'Production deployment completed for Grahmos V1+V2 Enhanced Architecture'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Skip production notification
        if: secrets.SLACK_WEBHOOK_URL == ''
        run: echo "⚠️  Slack webhook not configured, skipping production notification"

  # Network infrastructure deployment
  deploy-network-infrastructure:
    name: Deploy Network Infrastructure
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[deploy-network]')
    environment: network-infrastructure
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy srsRAN 4G/5G
        run: |
          echo "Deploying srsRAN/OAI network components..."
          # Network infrastructure deployment logic
          
      - name: Deploy Core Network
        run: |
          echo "Deploying Open5GS/free5GC core network..."
          # Core network deployment logic
          
      - name: Deploy LoRaWAN Infrastructure
        run: |
          echo "Deploying LoRaWAN beacon infrastructure..."
          # LoRaWAN deployment logic
      
      - name: Configure NTN/HAPS Backhaul
        run: |
          echo "Configuring NTN/HAPS satellite backhaul..."
          # Satellite backhaul configuration

  # Monitoring and alerting setup
  setup-monitoring:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy monitoring stack
        run: |
          echo "Setting up enhanced monitoring with Thanos, Loki, and Jaeger..."
          # Enhanced monitoring deployment
      
      - name: Configure alerting rules
        run: |
          echo "Configuring Prometheus alerting rules..."
          # Alerting configuration
      
      - name: Setup dashboards
        run: |
          echo "Importing Grafana dashboards..."
          # Dashboard setup

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, setup-monitoring]
    if: always()
    
    steps:
      - name: Clean up old images
        run: |
          # Keep last 10 images, remove older ones
          echo "Cleaning up old container images..."
          
      - name: Clean up artifacts
        run: |
          echo "Cleaning up build artifacts..."
          
      - name: Update deployment status
        run: |
          echo "Updating deployment status..."

# Workflow completion notification
  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [cleanup]
    if: always()
    
    steps:
      - name: Notify deployment completion
        if: secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🚀 Grahmos V1+V2 Enhanced CI/CD Pipeline Completed
            📦 Version: ${{ env.VERSION }}
            🏷️  Commit: ${{ github.sha }}
            🌟 Environment: ${{ github.event.inputs.deploy_environment || 'auto' }}
            📊 Status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Skip completion notification
        if: secrets.SLACK_WEBHOOK_URL == ''
        run: echo "⚠️  Slack webhook not configured, skipping completion notification"
