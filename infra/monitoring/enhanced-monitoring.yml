version: '3.8'

# Enhanced Monitoring Stack for Grahmos V1+V2 with NTN/RAN + Edge
# Includes Thanos for distributed metrics, Loki for logs, Jaeger for tracing

networks:
  monitoring:
    driver: bridge
  grahmos_default:
    external: true

volumes:
  prometheus_data:
  thanos_data:
  loki_data:
  grafana_data:
  jaeger_data:
  alertmanager_data:

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: grahmos-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
      - '--storage.tsdb.min-block-duration=5m'
      - '--storage.tsdb.max-block-duration=2h'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
      - grahmos_default
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Thanos Sidecar for Prometheus
  thanos-sidecar:
    image: quay.io/thanos/thanos:v0.32.5
    container_name: grahmos-thanos-sidecar
    restart: unless-stopped
    command:
      - 'sidecar'
      - '--tsdb.path=/prometheus'
      - '--prometheus.url=http://prometheus:9090'
      - '--grpc-address=0.0.0.0:10901'
      - '--http-address=0.0.0.0:10902'
      - '--objstore.config-file=/etc/thanos/bucket_config.yaml'
    ports:
      - "10901:10901"
      - "10902:10902"
    volumes:
      - prometheus_data:/prometheus
      - ./thanos/bucket_config.yaml:/etc/thanos/bucket_config.yaml:ro
    networks:
      - monitoring
    depends_on:
      - prometheus
    logging: *default-logging

  # Thanos Query for distributed queries
  thanos-query:
    image: quay.io/thanos/thanos:v0.32.5
    container_name: grahmos-thanos-query
    restart: unless-stopped
    command:
      - 'query'
      - '--grpc-address=0.0.0.0:10903'
      - '--http-address=0.0.0.0:10904'
      - '--store=thanos-sidecar:10901'
      - '--store=thanos-store:10905'
    ports:
      - "10904:10904"
    networks:
      - monitoring
    depends_on:
      - thanos-sidecar
    logging: *default-logging

  # Thanos Store for object storage queries
  thanos-store:
    image: quay.io/thanos/thanos:v0.32.5
    container_name: grahmos-thanos-store
    restart: unless-stopped
    command:
      - 'store'
      - '--grpc-address=0.0.0.0:10905'
      - '--http-address=0.0.0.0:10906'
      - '--data-dir=/var/thanos/store'
      - '--objstore.config-file=/etc/thanos/bucket_config.yaml'
    ports:
      - "10905:10905"
      - "10906:10906"
    volumes:
      - thanos_data:/var/thanos/store
      - ./thanos/bucket_config.yaml:/etc/thanos/bucket_config.yaml:ro
    networks:
      - monitoring
    logging: *default-logging

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: grahmos-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-your-secret-key}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_LOG_LEVEL=warn
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    networks:
      - monitoring
    depends_on:
      - prometheus
      - thanos-query
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.2
    container_name: grahmos-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
    networks:
      - monitoring
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail for log collection
  promtail:
    image: grafana/promtail:2.9.2
    container_name: grahmos-promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail/promtail-config.yaml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
      - grahmos_default
    depends_on:
      - loki
    logging: *default-logging

  # Jaeger for distributed tracing
  jaeger-all-in-one:
    image: jaegertracing/all-in-one:1.51.0
    container_name: grahmos-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    volumes:
      - jaeger_data:/tmp
    networks:
      - monitoring
      - grahmos_default
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:16686/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.89.0
    container_name: grahmos-otel-collector
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
    networks:
      - monitoring
      - grahmos_default
    depends_on:
      - jaeger-all-in-one
      - prometheus
    logging: *default-logging

  # AlertManager for alerting
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: grahmos-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - alertmanager_data:/alertmanager
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - monitoring
    depends_on:
      - prometheus
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: grahmos-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring
    logging: *default-logging

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: grahmos-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - monitoring
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: grahmos-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    networks:
      - monitoring
      - grahmos_default
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9121/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Blackbox Exporter for endpoint monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: grahmos-blackbox-exporter
    restart: unless-stopped
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox/blackbox.yml:/config/blackbox.yml:ro
    command:
      - '--config.file=/config/blackbox.yml'
    networks:
      - monitoring
      - grahmos_default
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9115/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pushgateway for batch job metrics
  pushgateway:
    image: prom/pushgateway:v1.6.2
    container_name: grahmos-pushgateway
    restart: unless-stopped
    ports:
      - "9091:9091"
    networks:
      - monitoring
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9091/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Image Renderer (for PDF reports)
  grafana-image-renderer:
    image: grafana/grafana-image-renderer:3.8.4
    container_name: grahmos-grafana-renderer
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ENABLE_METRICS=true
    networks:
      - monitoring
    logging: *default-logging

  # Vector for advanced log processing
  vector:
    image: timberio/vector:0.34.0-distroless-libc
    container_name: grahmos-vector
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./vector/vector.toml:/etc/vector/vector.toml:ro
    networks:
      - monitoring
      - grahmos_default
    depends_on:
      - loki
    logging: *default-logging

  # Edge Node Health Monitor (simulated)
  edge-health-monitor:
    image: alpine:3.18
    container_name: grahmos-edge-health-monitor
    restart: unless-stopped
    command: |
      sh -c '
        apk add --no-cache curl jq
        while true; do
          echo "Monitoring edge nodes..."
          # Simulate edge node health checks
          curl -s http://prometheus:9090/api/v1/query?query=up | jq .
          sleep 60
        done
      '
    networks:
      - monitoring
    depends_on:
      - prometheus
    logging: *default-logging

  # Custom metrics aggregator for Grahmos
  grahmos-metrics-aggregator:
    image: alpine:3.18
    container_name: grahmos-metrics-aggregator
    restart: unless-stopped
    command: |
      sh -c '
        apk add --no-cache curl jq python3 py3-pip
        pip3 install prometheus_client requests
        echo "Starting Grahmos metrics aggregation..."
        while true; do
          echo "Aggregating Grahmos-specific metrics..."
          # Custom metrics collection logic would go here
          sleep 30
        done
      '
    networks:
      - monitoring
      - grahmos_default
    depends_on:
      - prometheus
      - pushgateway
    logging: *default-logging
    environment:
      - PROMETHEUS_GATEWAY=pushgateway:9091
      - EDGE_NODES_CONFIG=${EDGE_NODES_CONFIG:-}

  # Notification service
  notification-service:
    image: alpine:3.18
    container_name: grahmos-notifications
    restart: unless-stopped
    command: |
      sh -c '
        apk add --no-cache curl jq
        echo "Starting notification service..."
        while true; do
          echo "Checking for alerts..."
          # Alert notification logic would go here
          sleep 60
        done
      '
    networks:
      - monitoring
    depends_on:
      - alertmanager
    logging: *default-logging
    environment:
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL:-}
      - PAGERDUTY_KEY=${PAGERDUTY_KEY:-}
