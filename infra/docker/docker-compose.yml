# Removed version field as it's obsolete in newer Docker Compose

services:
  # Meilisearch - Primary search backend
  meilisearch:
    image: getmeili/meilisearch:v1.5.1
    container_name: grahmos-meilisearch
    environment:
      MEILI_ENV: ${MEILI_ENV:-development}
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-development_master_key}
      MEILI_DB_PATH: /meili_data
      MEILI_HTTP_ADDR: 0.0.0.0:7700
      MEILI_LOG_LEVEL: ${MEILI_LOG_LEVEL:-INFO}
    ports:
      - "${MEILI_PORT:-7700}:7700"
    volumes:
      - meilisearch_data:/meili_data
    restart: unless-stopped
    networks:
      - edge-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Edge API - V1+V2 unified backend
  edge-api:
    build: 
      context: ../../apps/edge-api
      dockerfile: Dockerfile
    container_name: grahmos-edge-api
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      API_PORT: ${API_PORT:-3000}
      API_SOCKET_PATH: /var/run/edge/edge.sock
      
      # Search backend configuration
      SEARCH_BACKEND: ${SEARCH_BACKEND:-meili}
      MEILI_HOST: http://meilisearch:7700
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-development_master_key}
      MEILI_INDEX_NAME: ${MEILI_INDEX_NAME:-docs}
      INDEX_DIR: /data/indexes/current
      SQLITE_DB_PATH: ${SQLITE_DB_PATH:-/data/indexes/current/fts.sqlite}
      
      # JWT configuration
      JWT_ISSUER: ${JWT_ISSUER:-edge.grahmos.local}
      JWT_AUDIENCE: ${JWT_AUDIENCE:-grahmos-clients}
      JWT_TTL_SECONDS: ${JWT_TTL_SECONDS:-300}
      JWT_HS512_KEY: ${JWT_HS512_KEY:-replace_with_strong_key_in_production}
      
      # Authentication configuration
      MTLS_ENABLED: ${MTLS_ENABLED:-true}
      DPOP_ENABLED: ${DPOP_ENABLED:-true}
      DPOP_MAX_AGE: ${DPOP_MAX_AGE:-300}
      
      # Rate limiting
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-20}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-1}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
    
    volumes:
      - search_indexes:/data/indexes:ro
      - api_logs:/app/logs
    
    depends_on:
      meilisearch:
        condition: service_healthy
    
    restart: unless-stopped
    networks:
      - edge-network
    
    # Security: Run as non-root user
    user: "node"
    
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp:size=100M,uid=1000,gid=1000
      - /var/run/edge:size=10M,uid=1000,gid=1000
    
    # Resource limits
    mem_limit: 512m
    cpus: 0.5
    
    # Security: Drop all capabilities, add only necessary ones
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    
    # Security: No new privileges
    security_opt:
      - no-new-privileges:true
    
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(require('fs').existsSync('/var/run/edge/edge.sock') ? 0 : 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # NGINX - Reverse proxy with mTLS and security
  nginx:
    image: nginx:1.25-alpine
    container_name: grahmos-nginx
    ports:
      - "${NGINX_HTTPS_PORT:-8443}:8443"
      - "${NGINX_HTTP_PORT:-8080}:8080"
    
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../certs:/etc/nginx/certs:ro
      - edge_sockets:/var/run/edge:ro
      - nginx_logs:/var/log/nginx
    
    depends_on:
      edge-api:
        condition: service_healthy
    
    restart: unless-stopped
    networks:
      - edge-network
    
    # Security: Run as non-root user  
    user: "nginx"
    
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /var/cache/nginx:size=100M,uid=101,gid=101
      - /var/run:size=10M,uid=101,gid=101
      - /tmp:size=50M,uid=101,gid=101
    
    # Resource limits
    mem_limit: 256m
    cpus: 0.25
    
    # Security: Drop all capabilities
    cap_drop:
      - ALL
    
    # Security: No new privileges
    security_opt:
      - no-new-privileges:true
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"] 
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - Optional caching layer
  redis:
    image: redis:7-alpine
    container_name: grahmos-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-development_redis_password}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-development_redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - edge-network
    
    # Security: Run as non-root user
    user: "redis"
    
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp:size=100M,uid=999,gid=999
    
    # Resource limits
    mem_limit: 128m
    cpus: 0.25
    
    # Security: Drop all capabilities
    cap_drop:
      - ALL
    
    # Security: No new privileges
    security_opt:
      - no-new-privileges:true
    
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-development_redis_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    profiles:
      - caching  # Optional service, enabled with --profile caching

networks:
  edge-network:
    driver: bridge
    name: grahmos-edge-network
    ipam:
      config:
        - subnet: 172.20.0.0/24

volumes:
  meilisearch_data:
    driver: local
    name: grahmos-meilisearch-data
  
  search_indexes:
    driver: local
    name: grahmos-search-indexes
  
  edge_sockets:
    driver: local
    name: grahmos-edge-sockets
  
  api_logs:
    driver: local
    name: grahmos-api-logs
  
  nginx_logs:
    driver: local
    name: grahmos-nginx-logs
  
  redis_data:
    driver: local
    name: grahmos-redis-data

# Labels for container identification and management
x-labels: &labels
  com.grahmos.project: "edge-security-speed"
  com.grahmos.version: "2.0.0"
  com.grahmos.environment: "${NODE_ENV:-development}"
