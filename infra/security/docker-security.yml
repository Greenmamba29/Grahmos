version: '3.8'

# Grahmos V1+V2 Unified - Security Hardened Docker Configuration
# This overlay adds security hardening to production deployments

x-security-common: &security-common
  security_opt:
    - no-new-privileges:true
    - apparmor:docker-default
  cap_drop:
    - ALL
  cap_add:
    - CHOWN
    - SETGID
    - SETUID
  read_only: true
  tmpfs:
    - /tmp:noexec,nosuid,size=100m
    - /var/run:noexec,nosuid,size=100m

x-non-root: &non-root
  user: "1000:1000"

services:
  # Security-hardened edge API
  edge-api:
    <<: *security-common
    <<: *non-root
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    volumes:
      - /app/logs:/app/logs:rw
      - /app/uploads:/app/uploads:rw
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=warn
      - SECURITY_HARDENED=true
    sysctls:
      - net.core.somaxconn=1024
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Security-hardened NGINX proxy
  nginx-proxy:
    <<: *security-common
    user: "101:101"
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    volumes:
      - nginx_cache:/var/cache/nginx:rw
      - nginx_run:/var/run:rw
    sysctls:
      - net.core.somaxconn=1024
      - net.ipv4.tcp_tw_reuse=1
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535

  # Security-hardened Meilisearch
  meilisearch:
    <<: *security-common
    <<: *non-root
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    volumes:
      - meilisearch_data:/meili_data:rw
    environment:
      - MEILI_ENV=production
      - MEILI_NO_ANALYTICS=true
      - MEILI_LOG_LEVEL=WARN
    sysctls:
      - vm.max_map_count=262144
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # Security-hardened Redis
  redis:
    <<: *security-common
    <<: *non-root
    cap_add:
      - SETGID
      - SETUID
    volumes:
      - redis_data:/data:rw
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-changeme}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    sysctls:
      - net.core.somaxconn=65535
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # Security-hardened Prometheus
  prometheus:
    <<: *security-common
    user: "65534:65534"
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    volumes:
      - prometheus_data:/prometheus:rw
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=warn'

  # Security-hardened Grafana
  grafana:
    <<: *security-common
    user: "472:472"
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    volumes:
      - grafana_data:/var/lib/grafana:rw
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-changeme}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-changeme}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_LOG_LEVEL=warn

  # Security-hardened backup service
  backup:
    <<: *security-common
    <<: *non-root
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    volumes:
      - backup_data:/backup:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - BACKUP_RETENTION_DAYS=30
      - BACKUP_ENCRYPTION_ENABLED=true
      - LOG_LEVEL=warn

volumes:
  nginx_cache:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=100m,uid=101,gid=101,mode=0755
  nginx_run:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=100m,uid=101,gid=101,mode=0755
  meilisearch_data:
  redis_data:
  prometheus_data:
  grafana_data:
  backup_data:

networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: grahmos-secure
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      config:
        - subnet: 172.20.0.0/16
