# Grahmos Infrastructure Security Configuration
# Comprehensive security policies for container, Kubernetes, and network security

---
# Container Security Baseline
apiVersion: v1
kind: SecurityContext
metadata:
  name: grahmos-security-context
spec:
  # Run as non-root user
  runAsNonRoot: true
  runAsUser: 65534
  runAsGroup: 65534
  
  # Read-only root filesystem
  readOnlyRootFilesystem: true
  
  # Prevent privilege escalation
  allowPrivilegeEscalation: false
  
  # Drop all capabilities by default
  capabilities:
    drop:
      - ALL
    add:
      - NET_BIND_SERVICE  # Only add necessary capabilities
  
  # SELinux configuration
  seLinuxOptions:
    level: "s0:c123,c456"
    role: "system_r"
    type: "container_t"
    user: "system_u"
  
  # AppArmor profile
  appArmorProfile:
    type: RuntimeDefault
  
  # Seccomp profile
  seccompProfile:
    type: RuntimeDefault

---
# Pod Security Policy (deprecated but showing for reference)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: grahmos-restricted-psp
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName: 'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'
spec:
  privileged: false
  allowPrivilegeEscalation: false
  
  # Required capabilities to drop
  requiredDropCapabilities:
    - ALL
  
  # Allowed capabilities (minimal set)
  allowedCapabilities:
    - NET_BIND_SERVICE
  
  # Volume types allowed
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
    - 'csi'
  
  # Host network/ports restrictions
  hostNetwork: false
  hostIPC: false
  hostPID: false
  hostPorts:
    - min: 0
      max: 0  # No host ports allowed
  
  # User/group restrictions
  runAsUser:
    rule: 'MustRunAsNonRoot'
  runAsGroup:
    rule: 'RunAsAny'
  
  # SELinux restrictions
  seLinux:
    rule: 'RunAsAny'
  
  # Filesystem restrictions
  fsGroup:
    rule: 'RunAsAny'
    ranges:
      - min: 1
        max: 65535

---
# Pod Security Standards (replacement for PSP)
apiVersion: v1
kind: Namespace
metadata:
  name: grahmos-production
  labels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/enforce-version: v1.28
    pod-security.kubernetes.io/audit-version: v1.28
    pod-security.kubernetes.io/warn-version: v1.28

---
# Network Policy - Default Deny
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: grahmos-production
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress

---
# Network Policy - Grahmos Application
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: grahmos-app-network-policy
  namespace: grahmos-production
spec:
  podSelector:
    matchLabels:
      app: grahmos
  policyTypes:
    - Ingress
    - Egress
  
  ingress:
    # Allow ingress from ingress controller
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-system
        - podSelector:
            matchLabels:
              app: nginx-ingress
      ports:
        - protocol: TCP
          port: 8080
    
    # Allow ingress from monitoring
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
        - podSelector:
            matchLabels:
              app: prometheus
      ports:
        - protocol: TCP
          port: 9090
  
  egress:
    # Allow egress to database
    - to:
        - podSelector:
            matchLabels:
              app: postgres
      ports:
        - protocol: TCP
          port: 5432
    
    # Allow egress to Redis
    - to:
        - podSelector:
            matchLabels:
              app: redis
      ports:
        - protocol: TCP
          port: 6379
    
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    
    # Allow HTTPS egress for external APIs
    - to: []
      ports:
        - protocol: TCP
          port: 443

---
# Network Policy - Database
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgres-network-policy
  namespace: grahmos-production
spec:
  podSelector:
    matchLabels:
      app: postgres
  policyTypes:
    - Ingress
    - Egress
  
  ingress:
    # Only allow ingress from Grahmos app
    - from:
        - podSelector:
            matchLabels:
              app: grahmos
      ports:
        - protocol: TCP
          port: 5432
  
  egress:
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53

---
# Service Mesh Security (Istio)
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: grahmos-production
spec:
  mtls:
    mode: STRICT  # Enforce mutual TLS

---
# Authorization Policy (Istio)
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: grahmos-authz
  namespace: grahmos-production
spec:
  selector:
    matchLabels:
      app: grahmos
  rules:
    # Allow requests from ingress gateway
    - from:
        - source:
            principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
      to:
        - operation:
            methods: ["GET", "POST", "PUT", "DELETE"]
            paths: ["/api/*", "/auth/*"]
    
    # Allow requests from monitoring
    - from:
        - source:
            namespaces: ["monitoring"]
      to:
        - operation:
            methods: ["GET"]
            paths: ["/metrics", "/health"]

---
# Resource Quotas
apiVersion: v1
kind: ResourceQuota
metadata:
  name: grahmos-quota
  namespace: grahmos-production
spec:
  hard:
    requests.cpu: "10"
    requests.memory: 20Gi
    limits.cpu: "20"
    limits.memory: 40Gi
    persistentvolumeclaims: "10"
    pods: "20"
    services: "10"
    secrets: "20"
    configmaps: "20"

---
# Limit Ranges
apiVersion: v1
kind: LimitRange
metadata:
  name: grahmos-limits
  namespace: grahmos-production
spec:
  limits:
    - default:
        cpu: "500m"
        memory: "512Mi"
      defaultRequest:
        cpu: "100m"
        memory: "128Mi"
      type: Container
    - max:
        cpu: "2"
        memory: "4Gi"
      min:
        cpu: "50m"
        memory: "64Mi"
      type: Container

---
# RBAC - Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grahmos-app
  namespace: grahmos-production
automountServiceAccountToken: false

---
# RBAC - Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: grahmos-production
  name: grahmos-app-role
rules:
  # Allow reading ConfigMaps and Secrets
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list"]
    resourceNames: ["grahmos-config", "grahmos-secrets"]
  
  # Allow creating/updating own pods
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]
    resourceNames: ["grahmos-*"]

---
# RBAC - Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grahmos-app-binding
  namespace: grahmos-production
subjects:
  - kind: ServiceAccount
    name: grahmos-app
    namespace: grahmos-production
roleRef:
  kind: Role
  name: grahmos-app-role
  apiGroup: rbac.authorization.k8s.io

---
# Security Monitoring - Falco Rules
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-rules
  namespace: grahmos-production
data:
  grahmos_rules.yaml: |
    - rule: Grahmos Unexpected Network Connection
      desc: Detect unexpected network connections from Grahmos containers
      condition: >
        container.name startswith "grahmos" and
        (fd.typechar = 4 or fd.typechar = 6) and
        (fd.ip != "0.0.0.0" and fd.net != "127.0.0.0/8" and not fd.net in (postgres_ips, redis_ips))
      output: >
        Unexpected network connection from Grahmos container
        (command=%proc.cmdline connection=%fd.name)
      priority: WARNING
    
    - rule: Grahmos Privilege Escalation
      desc: Detect privilege escalation attempts in Grahmos containers
      condition: >
        container.name startswith "grahmos" and
        (spawned_process and (proc.name in (su, sudo, setuid_binaries) or
         proc.pname in (su, sudo, setuid_binaries)))
      output: >
        Privilege escalation attempt in Grahmos container
        (command=%proc.cmdline parent=%proc.pname)
      priority: HIGH
    
    - rule: Grahmos File Modification
      desc: Detect unauthorized file modifications in Grahmos containers
      condition: >
        container.name startswith "grahmos" and
        (open_write and not proc.name in (node, npm, yarn) and
         fd.name startswith "/app" and not fd.name contains "/tmp")
      output: >
        Unauthorized file modification in Grahmos container
        (file=%fd.name command=%proc.cmdline)
      priority: WARNING

---
# Container Image Security Policy (OPA Gatekeeper)
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: containerimagesecurity
spec:
  crd:
    spec:
      names:
        kind: ContainerImageSecurity
      validation:
        openAPIV3Schema:
          type: object
          properties:
            allowedRegistries:
              type: array
              items:
                type: string
            requiredImageScan:
              type: boolean
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package containerimagesecurity
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not starts_with(container.image, input.parameters.allowedRegistries[_])
          msg := sprintf("Container image %v is not from allowed registry", [container.image])
        }
        
        violation[{"msg": msg}] {
          input.parameters.requiredImageScan == true
          container := input.review.object.spec.containers[_]
          not container.image contains "@sha256:"
          msg := sprintf("Container image %v must include digest for security scanning", [container.image])
        }

---
# Apply Container Image Security Policy
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: ContainerImageSecurity
metadata:
  name: grahmos-image-security
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces: ["grahmos-production"]
  parameters:
    allowedRegistries:
      - "gcr.io/grahmos/"
      - "registry.grahmos.com/"
    requiredImageScan: true

---
# Admission Controller - Pod Security Standards
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionWebhook
metadata:
  name: pod-security-validator
webhooks:
  - name: pod-security.grahmos.com
    clientConfig:
      service:
        name: pod-security-webhook
        namespace: grahmos-system
        path: "/validate"
    rules:
      - operations: ["CREATE", "UPDATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    admissionReviewVersions: ["v1", "v1beta1"]
    sideEffects: None
    failurePolicy: Fail
